/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type CommentDataStruct = {
    profileId: PromiseOrValue<BigNumberish>;
    contentURI: PromiseOrValue<string>;
    profileIdPointed: PromiseOrValue<BigNumberish>;
    pubIdPointed: PromiseOrValue<BigNumberish>;
    referenceModuleData: PromiseOrValue<BytesLike>;
    collectModule: PromiseOrValue<string>;
    collectModuleInitData: PromiseOrValue<BytesLike>;
    referenceModule: PromiseOrValue<string>;
    referenceModuleInitData: PromiseOrValue<BytesLike>;
  };

  export type CommentDataStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    profileId: BigNumber;
    contentURI: string;
    profileIdPointed: BigNumber;
    pubIdPointed: BigNumber;
    referenceModuleData: string;
    collectModule: string;
    collectModuleInitData: string;
    referenceModule: string;
    referenceModuleInitData: string;
  };

  export type MirrorDataStruct = {
    profileId: PromiseOrValue<BigNumberish>;
    profileIdPointed: PromiseOrValue<BigNumberish>;
    pubIdPointed: PromiseOrValue<BigNumberish>;
    referenceModuleData: PromiseOrValue<BytesLike>;
    referenceModule: PromiseOrValue<string>;
    referenceModuleInitData: PromiseOrValue<BytesLike>;
  };

  export type MirrorDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    profileId: BigNumber;
    profileIdPointed: BigNumber;
    pubIdPointed: BigNumber;
    referenceModuleData: string;
    referenceModule: string;
    referenceModuleInitData: string;
  };

  export type PostDataStruct = {
    profileId: PromiseOrValue<BigNumberish>;
    contentURI: PromiseOrValue<string>;
    collectModule: PromiseOrValue<string>;
    collectModuleInitData: PromiseOrValue<BytesLike>;
    referenceModule: PromiseOrValue<string>;
    referenceModuleInitData: PromiseOrValue<BytesLike>;
  };

  export type PostDataStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    profileId: BigNumber;
    contentURI: string;
    collectModule: string;
    collectModuleInitData: string;
    referenceModule: string;
    referenceModuleInitData: string;
  };
}

export declare namespace NFTinStorage {
  export type CommentsStruct = {
    profileId: PromiseOrValue<BigNumberish>;
    profileIdPointed: PromiseOrValue<BigNumberish>;
    pubId: PromiseOrValue<BigNumberish>;
    pubIdPointed: PromiseOrValue<BigNumberish>;
  };

  export type CommentsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    profileId: BigNumber;
    profileIdPointed: BigNumber;
    pubId: BigNumber;
    pubIdPointed: BigNumber;
  };

  export type MirrorsStruct = {
    mirrorId: PromiseOrValue<BigNumberish>;
    profileIdPointed: PromiseOrValue<BigNumberish>;
    pubIdPointed: PromiseOrValue<BigNumberish>;
  };

  export type MirrorsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    mirrorId: BigNumber;
    profileIdPointed: BigNumber;
    pubIdPointed: BigNumber;
  };
}

export interface NftinInterface extends utils.Interface {
  functions: {
    "activityPerDay(uint256,uint256)": FunctionFragment;
    "activityPriceScaler()": FunctionFragment;
    "collections(uint256,uint256)": FunctionFragment;
    "comments(uint256,uint256,uint256)": FunctionFragment;
    "dailyRewardLimit()": FunctionFragment;
    "disablePost(uint256,uint256)": FunctionFragment;
    "getComments(uint256,uint256)": FunctionFragment;
    "getMirrors(uint256)": FunctionFragment;
    "getPostList(uint256)": FunctionFragment;
    "getProfile(address)": FunctionFragment;
    "getRating(uint256)": FunctionFragment;
    "getReward(uint256)": FunctionFragment;
    "isOnboarded(address)": FunctionFragment;
    "lastRewardRating(uint256)": FunctionFragment;
    "lensAddress()": FunctionFragment;
    "likes(uint256,uint256,uint256)": FunctionFragment;
    "likesCount(uint256,uint256)": FunctionFragment;
    "mirrors(uint256,uint256)": FunctionFragment;
    "nfts(uint256,uint256)": FunctionFragment;
    "onboardNewProfile(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "postEnable(uint256,uint256)": FunctionFragment;
    "postList(uint256,uint256)": FunctionFragment;
    "postPriceScaler()": FunctionFragment;
    "profiles(address)": FunctionFragment;
    "pubRating(uint256,uint256)": FunctionFragment;
    "rating(uint256)": FunctionFragment;
    "registrationBonus()": FunctionFragment;
    "rewardBalances(uint256)": FunctionFragment;
    "rewardsScaler()": FunctionFragment;
    "rewardsTime(uint256,uint256)": FunctionFragment;
    "rewardsValue(uint256,uint256)": FunctionFragment;
    "setComment((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes))": FunctionFragment;
    "setLensHubAddress(address)": FunctionFragment;
    "setLike(uint256,uint256,uint256)": FunctionFragment;
    "setMirror((uint256,uint256,uint256,bytes,address,bytes))": FunctionFragment;
    "setPost((uint256,string,address,bytes,address,bytes),address,uint256,uint8)": FunctionFragment;
    "setTinToken(address)": FunctionFragment;
    "testVar()": FunctionFragment;
    "tinToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activityPerDay"
      | "activityPriceScaler"
      | "collections"
      | "comments"
      | "dailyRewardLimit"
      | "disablePost"
      | "getComments"
      | "getMirrors"
      | "getPostList"
      | "getProfile"
      | "getRating"
      | "getReward"
      | "isOnboarded"
      | "lastRewardRating"
      | "lensAddress"
      | "likes"
      | "likesCount"
      | "mirrors"
      | "nfts"
      | "onboardNewProfile"
      | "owner"
      | "postEnable"
      | "postList"
      | "postPriceScaler"
      | "profiles"
      | "pubRating"
      | "rating"
      | "registrationBonus"
      | "rewardBalances"
      | "rewardsScaler"
      | "rewardsTime"
      | "rewardsValue"
      | "setComment"
      | "setLensHubAddress"
      | "setLike"
      | "setMirror"
      | "setPost"
      | "setTinToken"
      | "testVar"
      | "tinToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activityPerDay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activityPriceScaler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collections",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "comments",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyRewardLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disablePost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComments",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMirrors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRating",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnboarded",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardRating",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lensAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "likes",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "likesCount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrors",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nfts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onboardNewProfile",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postEnable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "postList",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "postPriceScaler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pubRating",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rating",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsScaler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTime",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setComment",
    values: [DataTypes.CommentDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLensHubAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLike",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMirror",
    values: [DataTypes.MirrorDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPost",
    values: [
      DataTypes.PostDataStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTinToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "testVar", values?: undefined): string;
  encodeFunctionData(functionFragment: "tinToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activityPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activityPriceScaler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyRewardLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disablePost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMirrors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPostList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRating", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOnboarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lensAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "likesCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mirrors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onboardNewProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postEnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postPriceScaler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pubRating", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rating", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsScaler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setComment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLensHubAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLike", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMirror", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTinToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testVar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tinToken", data: BytesLike): Result;

  events: {
    "commented(address,tuple)": EventFragment;
    "liked(address,uint256,uint256)": EventFragment;
    "mirrored(address,tuple)": EventFragment;
    "posted(address,tuple)": EventFragment;
    "profileOnboarded(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "commented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "liked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "mirrored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "posted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "profileOnboarded"): EventFragment;
}

export interface commentedEventObject {
  _profileAddress: string;
  _data: DataTypes.CommentDataStructOutput;
}
export type commentedEvent = TypedEvent<
  [string, DataTypes.CommentDataStructOutput],
  commentedEventObject
>;

export type commentedEventFilter = TypedEventFilter<commentedEvent>;

export interface likedEventObject {
  _profileAddress: string;
  _profileIdPointed: BigNumber;
  _pubIdPointed: BigNumber;
}
export type likedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  likedEventObject
>;

export type likedEventFilter = TypedEventFilter<likedEvent>;

export interface mirroredEventObject {
  _profileAddress: string;
  _data: DataTypes.MirrorDataStructOutput;
}
export type mirroredEvent = TypedEvent<
  [string, DataTypes.MirrorDataStructOutput],
  mirroredEventObject
>;

export type mirroredEventFilter = TypedEventFilter<mirroredEvent>;

export interface postedEventObject {
  _profileAddress: string;
  _data: DataTypes.PostDataStructOutput;
}
export type postedEvent = TypedEvent<
  [string, DataTypes.PostDataStructOutput],
  postedEventObject
>;

export type postedEventFilter = TypedEventFilter<postedEvent>;

export interface profileOnboardedEventObject {
  _profileAddress: string;
  _profileId: BigNumber;
}
export type profileOnboardedEvent = TypedEvent<
  [string, BigNumber],
  profileOnboardedEventObject
>;

export type profileOnboardedEventFilter =
  TypedEventFilter<profileOnboardedEvent>;

export interface Nftin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activityPerDay(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    activityPriceScaler(overrides?: CallOverrides): Promise<[BigNumber]>;

    collections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        profileId: BigNumber;
        profileIdPointed: BigNumber;
        pubId: BigNumber;
        pubIdPointed: BigNumber;
      }
    >;

    dailyRewardLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    disablePost(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getComments(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NFTinStorage.CommentsStructOutput[]]>;

    getMirrors(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NFTinStorage.MirrorsStructOutput[]]>;

    getPostList(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getProfile(
      _profileAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRating(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReward(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOnboarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRewardRating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lensAddress(overrides?: CallOverrides): Promise<[string]>;

    likes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    likesCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mirrors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mirrorId: BigNumber;
        profileIdPointed: BigNumber;
        pubIdPointed: BigNumber;
      }
    >;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number] & {
        nftAddress: string;
        tokenId: BigNumber;
        postId: BigNumber;
        nftType: number;
      }
    >;

    onboardNewProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    postEnable(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    postList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    postPriceScaler(overrides?: CallOverrides): Promise<[BigNumber]>;

    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pubRating(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registrationBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsScaler(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsTime(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsValue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setComment(
      vars: DataTypes.CommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLensHubAddress(
      _lensHub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLike(
      _profileId: PromiseOrValue<BigNumberish>,
      _profileIdPointed: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMirror(
      vars: DataTypes.MirrorDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPost(
      vars: DataTypes.PostDataStruct,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTinToken(
      _tinToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testVar(overrides?: CallOverrides): Promise<[BigNumber]>;

    tinToken(overrides?: CallOverrides): Promise<[string]>;
  };

  activityPerDay(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  activityPriceScaler(overrides?: CallOverrides): Promise<BigNumber>;

  collections(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  comments(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      profileId: BigNumber;
      profileIdPointed: BigNumber;
      pubId: BigNumber;
      pubIdPointed: BigNumber;
    }
  >;

  dailyRewardLimit(overrides?: CallOverrides): Promise<BigNumber>;

  disablePost(
    _profileId: PromiseOrValue<BigNumberish>,
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getComments(
    _profileId: PromiseOrValue<BigNumberish>,
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NFTinStorage.CommentsStructOutput[]>;

  getMirrors(
    _profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NFTinStorage.MirrorsStructOutput[]>;

  getPostList(
    _profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getProfile(
    _profileAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRating(
    _profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReward(
    _profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOnboarded(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRewardRating(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lensAddress(overrides?: CallOverrides): Promise<string>;

  likes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  likesCount(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mirrors(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mirrorId: BigNumber;
      profileIdPointed: BigNumber;
      pubIdPointed: BigNumber;
    }
  >;

  nfts(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, number] & {
      nftAddress: string;
      tokenId: BigNumber;
      postId: BigNumber;
      nftType: number;
    }
  >;

  onboardNewProfile(
    _profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  postEnable(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  postList(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  postPriceScaler(overrides?: CallOverrides): Promise<BigNumber>;

  profiles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pubRating(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rating(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registrationBonus(overrides?: CallOverrides): Promise<BigNumber>;

  rewardBalances(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsScaler(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsTime(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsValue(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setComment(
    vars: DataTypes.CommentDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLensHubAddress(
    _lensHub: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLike(
    _profileId: PromiseOrValue<BigNumberish>,
    _profileIdPointed: PromiseOrValue<BigNumberish>,
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMirror(
    vars: DataTypes.MirrorDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPost(
    vars: DataTypes.PostDataStruct,
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTinToken(
    _tinToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testVar(overrides?: CallOverrides): Promise<BigNumber>;

  tinToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activityPerDay(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activityPriceScaler(overrides?: CallOverrides): Promise<BigNumber>;

    collections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        profileId: BigNumber;
        profileIdPointed: BigNumber;
        pubId: BigNumber;
        pubIdPointed: BigNumber;
      }
    >;

    dailyRewardLimit(overrides?: CallOverrides): Promise<BigNumber>;

    disablePost(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getComments(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NFTinStorage.CommentsStructOutput[]>;

    getMirrors(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NFTinStorage.MirrorsStructOutput[]>;

    getPostList(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getProfile(
      _profileAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRating(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOnboarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRewardRating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lensAddress(overrides?: CallOverrides): Promise<string>;

    likes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    likesCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mirrors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mirrorId: BigNumber;
        profileIdPointed: BigNumber;
        pubIdPointed: BigNumber;
      }
    >;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number] & {
        nftAddress: string;
        tokenId: BigNumber;
        postId: BigNumber;
        nftType: number;
      }
    >;

    onboardNewProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    postEnable(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    postList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postPriceScaler(overrides?: CallOverrides): Promise<BigNumber>;

    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pubRating(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrationBonus(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsScaler(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTime(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsValue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setComment(
      vars: DataTypes.CommentDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setLensHubAddress(
      _lensHub: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLike(
      _profileId: PromiseOrValue<BigNumberish>,
      _profileIdPointed: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMirror(
      vars: DataTypes.MirrorDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPost(
      vars: DataTypes.PostDataStruct,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTinToken(
      _tinToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testVar(overrides?: CallOverrides): Promise<BigNumber>;

    tinToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "commented(address,tuple)"(
      _profileAddress?: PromiseOrValue<string> | null,
      _data?: DataTypes.CommentDataStruct | null
    ): commentedEventFilter;
    commented(
      _profileAddress?: PromiseOrValue<string> | null,
      _data?: DataTypes.CommentDataStruct | null
    ): commentedEventFilter;

    "liked(address,uint256,uint256)"(
      _profileAddress?: PromiseOrValue<string> | null,
      _profileIdPointed?: PromiseOrValue<BigNumberish> | null,
      _pubIdPointed?: PromiseOrValue<BigNumberish> | null
    ): likedEventFilter;
    liked(
      _profileAddress?: PromiseOrValue<string> | null,
      _profileIdPointed?: PromiseOrValue<BigNumberish> | null,
      _pubIdPointed?: PromiseOrValue<BigNumberish> | null
    ): likedEventFilter;

    "mirrored(address,tuple)"(
      _profileAddress?: PromiseOrValue<string> | null,
      _data?: DataTypes.MirrorDataStruct | null
    ): mirroredEventFilter;
    mirrored(
      _profileAddress?: PromiseOrValue<string> | null,
      _data?: DataTypes.MirrorDataStruct | null
    ): mirroredEventFilter;

    "posted(address,tuple)"(
      _profileAddress?: PromiseOrValue<string> | null,
      _data?: DataTypes.PostDataStruct | null
    ): postedEventFilter;
    posted(
      _profileAddress?: PromiseOrValue<string> | null,
      _data?: DataTypes.PostDataStruct | null
    ): postedEventFilter;

    "profileOnboarded(address,uint256)"(
      _profileAddress?: PromiseOrValue<string> | null,
      _profileId?: PromiseOrValue<BigNumberish> | null
    ): profileOnboardedEventFilter;
    profileOnboarded(
      _profileAddress?: PromiseOrValue<string> | null,
      _profileId?: PromiseOrValue<BigNumberish> | null
    ): profileOnboardedEventFilter;
  };

  estimateGas: {
    activityPerDay(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activityPriceScaler(overrides?: CallOverrides): Promise<BigNumber>;

    collections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyRewardLimit(overrides?: CallOverrides): Promise<BigNumber>;

    disablePost(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getComments(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMirrors(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPostList(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfile(
      _profileAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRating(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOnboarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardRating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lensAddress(overrides?: CallOverrides): Promise<BigNumber>;

    likes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    likesCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mirrors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onboardNewProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    postEnable(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postPriceScaler(overrides?: CallOverrides): Promise<BigNumber>;

    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pubRating(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrationBonus(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsScaler(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTime(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsValue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setComment(
      vars: DataTypes.CommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLensHubAddress(
      _lensHub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLike(
      _profileId: PromiseOrValue<BigNumberish>,
      _profileIdPointed: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMirror(
      vars: DataTypes.MirrorDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPost(
      vars: DataTypes.PostDataStruct,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTinToken(
      _tinToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testVar(overrides?: CallOverrides): Promise<BigNumber>;

    tinToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activityPerDay(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activityPriceScaler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collections(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyRewardLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disablePost(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getComments(
      _profileId: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMirrors(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPostList(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfile(
      _profileAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRating(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOnboarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRewardRating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lensAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    likes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    likesCount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mirrors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onboardNewProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postEnable(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postPriceScaler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pubRating(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rating(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrationBonus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsScaler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsTime(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsValue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setComment(
      vars: DataTypes.CommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLensHubAddress(
      _lensHub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLike(
      _profileId: PromiseOrValue<BigNumberish>,
      _profileIdPointed: PromiseOrValue<BigNumberish>,
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMirror(
      vars: DataTypes.MirrorDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPost(
      vars: DataTypes.PostDataStruct,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTinToken(
      _tinToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testVar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tinToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
